* What

	This container provides a git server which may be used to host repositories. It does not provide a web interface of any kind!

	-------------

	Rather than using plain git the image uses [[http://gitolite.com/gitolite/basic-admin/][gitolite]] for additional control over user accounts, branch protection, etc.

	gitolite uses a special =gitolite-admin= repository which allows for:
	- Defining the list of repositories on the server (with support for wildcard entries so users can just "push" to the server in order to create a new empty repository)
	- Has a directory for ssh keys
	- Has a config file for setting up per branch protection
	- etc

  This means that in order to change settings the process is:
	1. Clone the =gitolite-admin= repository
	2. Make changes, see full documentation [[http://gitolite.com/gitolite/basic-admin/index.html][here]]
	3. Push back to the server

	This is far simpler than using plain git which would involve ssh-ing into the server, creating user accounts, adding them to a git group, manipulating the authorised keys file, messing with file permissions, changing the default login shell, etc. Additionally this standard approach is less powerful as it does not allow for per branch settings.

* Persistent Data

	The container has two mount points for data which you will almost certainly want to persist.

** /etc/ssh/hostkeys

	 This directory contains the ssh daemon host keys for the server. If the host keys change each time the container runs then clients are likely to get warning that the host key does not match that in the known hosts file, hence there may be a man-in-the-middle attack.

	 Note that the container will automatically generate the hostkeys upon startup if they are not present, however in order to prevent these warnings they should be persisted by storing them in a volume.

	 For example, run the container with the command:

	 =docker run gitolite -v "/docker/gitolite/hostkeys:/etc/ssh/hostkeys:rw"=

** /home/git

	 This directory contains:
	 - =gitolite.rc= - config file for gitolite behaviour
	 - =repositories/= - stores the actual repositories
	 - =projects.list= - used by gitweb etc to decide which repos to display in web-interface
	 - =.ssh/= - contains authorized_keys file generated by gitolite

	 Depending on use case it may be desirable to mount the entire =/home/git= directory as a volume, but at the very least the =/home/git/repositories= directory should be persisted between runs, else the container going down will delete all the git repositories!
